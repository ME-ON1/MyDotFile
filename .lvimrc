if g:localvimrc_sourced_once_for_file
	finish
endif

set path=,,.,./inc,./../inc,./../../inc,./../../../inc,./../../../../inc,$VIM_INC

set cinoptions=b1,g0,N-s
set cinkeys+=0=break


set shiftwidth=4 softtabstop=4 expandtab
" current funtion name
"
function! ShowFuncName()
	let lnum = line(".")
	let col = col(".")
	echohl ModeMsg
	echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
	echohl None
	call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfunction
map f :call ShowFuncName() <CR>


" show bug description

function! GetCurrentIssueText()
	let c = col ('.')-1
	let l = line('.')
	let ll = getline(l)
	let ll1 = strpart(ll,0,c)
	let ll1 = matchstr(ll1,'[0-9#a-zA-Z]*$')
	if strlen(ll1) == 0
		return ll1
	else
		let ll2 = strpart(ll,c,strlen(ll)-c+1)
		let ll2 = strpart(ll2,0,match(ll2,'$\|[^0-9#a-zA-Z]'))
		let text = ll1.ll2

		let text = substitute( text, "#", "", "g"  )
		return text
	endif
endfunction

function! OpenIssue( )

	let s:browser = "firefox"

	let s:issueText = GetCurrentIssueText( )
	let s:urlTemplate = ""
	let s:pattern = "\\(\\a\\+\\)\\(\\d\\+\\)"

	let s:prefix = substitute( s:issueText, s:pattern, "\\1", ""  )
	let s:id = substitute( s:issueText, s:pattern, "\\2", ""  )

	if s:prefix == "i"
		let s:urlTemplate = "https://issues.apache.org/ooo/show_bug.cgi?id=%"
	elseif s:prefix == "n"
		let s:urlTemplate = "https://bugzilla.novell.com/show_bug.cgi?id=%"
	elseif s:prefix == "fdo"
		let s:urlTemplate = "https://bugs.documentfoundation.org/show_bug.cgi?id=%"
	endif

	if s:urlTemplate != ""
		let s:url = substitute( s:urlTemplate, "%", s:id, "g"  )
		let s:cmd = "silent !" . s:browser . " " . s:url . "&"
		execute s:cmd
	endif
endfunction

map <silent> <C-i> :call OpenIssue()<CR><C-l>

"editing zipped edited files

au BufReadCmd *.odt,*.ott,*.ods,*.ots,*.odp,*.otp,*.odg,*.otg,*.odb,*.odf,*.odm,*.odc call zip#Browse(expand("<amatch>"))
au BufReadCmd *.sxw,*.stw,*.sxc,*.stc,*.sxi,*.sti,*.sxd,*.std,*.odb,*.sxm,*.sxg,*.sxs call zip#Browse(expand("<amatch>"))
au BufReadCmd *.bau call zip#Browse(expand("<amatch>"))
au BufReadCmd *.oxt call zip#Browse(expand("<amatch>"))
au BufReadCmd *.docx,*.dotx,*.dotm,*.docm,*.xlsx,*.xltx,*.xlsm,*.xsltm,*.pptx,*.potx,*.ppsx,*.pptm,*.ppsm,*.potm call zip#Browse(expand("<amatch>"))

map <F11> :% !xmllint --format --recover - 2>/dev/null<CR>
map <F11> :% !prettyprint<CR>

" Avoiding UUID in SmartArtFiles

nnoremap <silent><leader>ls :% !pptx-kill-uuid.py<cr>

command GotoRandom pyf /path/to/goto-random.py
set cscopequickfix=s-,c-,d-,i-,t-,e-


if has("cscope")

    """"""""""""" Standard cscope/vim boilerplate

    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " add any cscope database in current directory
    if filereadable("cscope.out")
        cs add cscope.out
    " else add the database pointed to by environment variable
    elseif $CSCOPE_DB != ""
        cs add $CSCOPE_DB
    endif

    " show msg when any other cscope db added
    set cscopeverbose


    """"""""""""" My cscope/vim key mappings
    "
    " The following maps all invoke one of the following cscope search types:
    "
    "   's'   symbol: find all references to the token under cursor
    "   'g'   global: find global definition(s) of the token under cursor
    "   'c'   calls:  find all calls to the function name under cursor
    "   't'   text:   find all instances of the text under cursor
    "   'e'   egrep:  egrep search for the word under cursor
    "   'f'   file:   open the filename under cursor
    "   'i'   includes: find files that include the filename under cursor
    "   'd'   called: find functions that function under cursor calls
    "
    " Below are three sets of the maps: one set that just jumps to your
    " search result, one that splits the existing vim window horizontally and
    " diplays your search result in the new window, and one that does the same
    " thing, but does a vertical split instead (vim 6 only).
    "
    " I've used CTRL-\ and CTRL-@ as the starting keys for these maps, as it's
    " unlikely that you need their default mappings (CTRL-\'s default use is
    " as part of CTRL-\ CTRL-N typemap, which basically just does the same
    " thing as hitting 'escape': CTRL-@ doesn't seem to have any default use).
    " If you don't like using 'CTRL-@' or CTRL-\, , you can change some or all
    " of these maps to use other keys.  One likely candidate is 'CTRL-_'
    " (which also maps to CTRL-/, which is easier to type).  By default it is
    " used to switch between Hebrew and English keyboard mode.
    "
    " All of the maps involving the <cfile> macro use '^<cfile>$': this is so
    " that searches over '#include <time.h>" return only references to
    " 'time.h', and not 'sys/time.h', etc. (by default cscope will return all
    " files that contain 'time.h' as part of their name).


    " To do the first type of search, hit 'CTRL-\', followed by one of the
    " cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
    " search will be displayed in the current window.  You can use CTRL-T to
    " go back to where you were before the search.
    "

    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


    " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
    " makes the vim window split horizontally, with search result displayed in
    " the new window.
    "
    " (Note: earlier versions of vim may not have the :scs command, but it
    " can be simulated roughly via:
    "    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>

    nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>


    " Hitting CTRL-space *twice* before the search type does a vertical
    " split instead of a horizontal one (vim 6 and up only)
    "
    " (Note: you may wish to put a 'set splitright' in your .vimrc
    " if you prefer the new window on the right instead of the left

    nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>


    """"""""""""" key map timeouts
    "
    " By default Vim will only wait 1 second for each keystroke in a mapping.
    " You may find that too short with the above typemaps.  If so, you should
    " either turn off mapping timeouts via 'notimeout'.
    "
    "set notimeout
    "
    " Or, you can keep timeouts, by uncommenting the timeoutlen line below,
    " with your own personal favorite value (in milliseconds):
    "
    "set timeoutlen=4000
    "
    " Either way, since mapping timeout settings by default also set the
    " timeouts for multicharacter 'keys codes' (like <F1>), you should also
    " set ttimeout and ttimeoutlen: otherwise, you will experience strange
    " delays as vim waits for a keystroke after you hit ESC (it will be
    " waiting to see if the ESC is actually part of a key code like <F1>).
    "
    "set ttimeout
    "
    " personally, I find a tenth of a second to work well for key code
    " timeouts. If you experience problems and have a slow terminal or network
    " connection, set it higher.  If you don't set ttimeoutlen, the value for
    " timeoutlent (default: 1000 = 1 second, which is sluggish) is used.
    "
    "set ttimeoutlen=100

endif


"cnoreabbrev <expr> csa
          "\ ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs add'  : 'csa')
    "cnoreabbrev <expr> csf
          "\ ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs find' : 'csf')
    "cnoreabbrev <expr> csk
          "\ ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs kill' : 'csk')
    "cnoreabbrev <expr> csr
          "\ ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs reset' : 'csr')
    "cnoreabbrev <expr> css
          "\ ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs show' : 'css')
    "cnoreabbrev <expr> csh
          "\ ((getcmdtype() == ':' && getcmdpos() <= 4)? 'cs help' : 'csh')
