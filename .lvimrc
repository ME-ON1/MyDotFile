if g:localvimrc_sourced_once_for_file
	finish
endif

set path=,,.,./inc,./../inc,./../../inc,./../../../inc,./../../../../inc,$VIM_INC

set cinoptions=b1,g0,N-s
set cinkeys+=0=break

let g:localvimrc_sandbox = 0

" current funtion name
"
function! ShowFuncName()
	let lnum = line(".")
	let col = col(".")
	echohl ModeMsg
	echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
	echohl None
	call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfunction
map f :call ShowFuncName() <CR>


" show bug description

function! GetCurrentIssueText()
	let c = col ('.')-1
	let l = line('.')
	let ll = getline(l)
	let ll1 = strpart(ll,0,c)
	let ll1 = matchstr(ll1,'[0-9#a-zA-Z]*$')
	if strlen(ll1) == 0
		return ll1
	else
		let ll2 = strpart(ll,c,strlen(ll)-c+1)
		let ll2 = strpart(ll2,0,match(ll2,'$\|[^0-9#a-zA-Z]'))
		let text = ll1.ll2

		let text = substitute( text, "#", "", "g"  )
		return text
	endif
endfunction

function! OpenIssue( )

	let s:browser = "firefox"

	let s:issueText = GetCurrentIssueText( )
	let s:urlTemplate = ""
	let s:pattern = "\\(\\a\\+\\)\\(\\d\\+\\)"

	let s:prefix = substitute( s:issueText, s:pattern, "\\1", ""  )
	let s:id = substitute( s:issueText, s:pattern, "\\2", ""  )

	if s:prefix == "i"
		let s:urlTemplate = "https://issues.apache.org/ooo/show_bug.cgi?id=%"
	elseif s:prefix == "n"
		let s:urlTemplate = "https://bugzilla.novell.com/show_bug.cgi?id=%"
	elseif s:prefix == "fdo"
		let s:urlTemplate = "https://bugs.documentfoundation.org/show_bug.cgi?id=%"
	endif

	if s:urlTemplate != ""
		let s:url = substitute( s:urlTemplate, "%", s:id, "g"  )
		let s:cmd = "silent !" . s:browser . " " . s:url . "&"
		execute s:cmd
	endif
endfunction

map <silent> <C-i> :call OpenIssue()<CR><C-l>

"editing zipped edited files

au BufReadCmd *.odt,*.ott,*.ods,*.ots,*.odp,*.otp,*.odg,*.otg,*.odb,*.odf,*.odm,*.odc call zip#Browse(expand("<amatch>"))
au BufReadCmd *.sxw,*.stw,*.sxc,*.stc,*.sxi,*.sti,*.sxd,*.std,*.odb,*.sxm,*.sxg,*.sxs call zip#Browse(expand("<amatch>"))
au BufReadCmd *.bau call zip#Browse(expand("<amatch>"))
au BufReadCmd *.oxt call zip#Browse(expand("<amatch>"))
au BufReadCmd *.docx,*.dotx,*.dotm,*.docm,*.xlsx,*.xltx,*.xlsm,*.xsltm,*.pptx,*.potx,*.ppsx,*.pptm,*.ppsm,*.potm call zip#Browse(expand("<amatch>"))

map <F11> :% !xmllint --format --recover - 2>/dev/null<CR>
map <F11> :% !prettyprint<CR>

" Avoiding UUID in SmartArtFiles

nnoremap <silent><leader>ls :% !pptx-kill-uuid.py<cr>

command GotoRandom pyf /path/to/goto-random.py
